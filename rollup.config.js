import dotenv from "dotenv";
import typescript from "@rollup/plugin-typescript";
import { nodeResolve } from "@rollup/plugin-node-resolve";
import commonjs from "@rollup/plugin-commonjs";
import css from "rollup-plugin-css-only";
import copy from "rollup-plugin-copy";
import replace from "@rollup/plugin-replace";

dotenv.config();

const isProd = process.env.BUILD === "production";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/
`;

const output = [];

if (isProd) {
  output.push({
    input: "./src/main.ts",
    output: {
      dir: "./dist",
      format: "cjs",
      exports: "default",
      banner,
    },
    external: ["obsidian"],
    plugins: [
      css({ output: "styles.css" }),
      typescript(),
      nodeResolve({ browser: true }),
      replace({
        preventAssignment: true,
        "process.env.NODE_ENV": JSON.stringify(process.env.BUILD),
      }),
      commonjs(),
      copy({
        targets: [{ src: "./manifest.json", dest: "./dist" }],
      }),
    ],
  });
}

if (process.env.PLUGIN_DEST || !isProd) {
  output.push({
    input: "./src/main.ts",
    output: {
      dir: process.env.PLUGIN_DEST || "./dist",
      sourcemap: "inline",
      sourcemapExcludeSources: isProd,
      format: "cjs",
      exports: "default",
      banner,
    },
    external: ["obsidian"],
    plugins: [
      css({ output: "styles.css" }),
      typescript(),
      nodeResolve({ browser: true }),
      replace({
        preventAssignment: true,
        "process.env.NODE_ENV": JSON.stringify(process.env.BUILD),
      }),
      commonjs(),
      copy({
        targets: [
          { src: "./manifest.json", dest: process.env.PLUGIN_DEST || "./dist" },
        ],
      }),
    ],
  });
}

export default output;
